<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Planilha Financeira MEI</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: white;
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 25px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
        }

        .company-info {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .logo-placeholder {
            width: 80px;
            height: 80px;
            background: linear-gradient(45deg, #4CAF50, #45a049);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 24px;
            font-weight: bold;
        }

        .company-details h1 {
            color: #2c3e50;
            font-size: 28px;
            margin-bottom: 5px;
        }

        .company-details p {
            color: #7f8c8d;
            font-size: 14px;
        }

        .status-indicator {
            padding: 12px 24px;
            border-radius: 25px;
            font-weight: bold;
            font-size: 16px;
            transition: all 0.3s ease;
        }

        .status-green {
            background: linear-gradient(45deg, #4CAF50, #45a049);
            color: white;
        }

        .status-red {
            background: linear-gradient(45deg, #f44336, #d32f2f);
            color: white;
        }

        .tabs {
            display: flex;
            background: white;
            border-radius: 15px;
            padding: 8px;
            margin-bottom: 25px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            overflow-x: auto;
        }

        .tab {
            padding: 15px 25px;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
            white-space: nowrap;
            color: #7f8c8d;
        }

        .tab.active {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            transform: translateY(-2px);
        }

        .tab-content {
            display: none;
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            animation: fadeIn 0.3s ease;
        }

        .tab-content.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 25px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-group label {
            font-weight: 600;
            margin-bottom: 8px;
            color: #2c3e50;
        }

        .form-group input, .form-group select {
            padding: 12px 15px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .form-group input:focus, .form-group select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .btn {
            padding: 12px 30px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
        }

        .btn-primary {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .btn-danger {
            background: linear-gradient(45deg, #f44336, #d32f2f);
            color: white;
        }

        .btn-danger:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(244, 67, 54, 0.3);
        }

        .table-container {
            overflow-x: auto;
            margin: 25px 0;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }

        table {
            width: 100%;
            border-collapse: collapse;
            background: white;
        }

        th {
            background: linear-gradient(45deg, #2c3e50, #34495e);
            color: white;
            padding: 15px;
            text-align: left;
            font-weight: 600;
        }

        td {
            padding: 15px;
            border-bottom: 1px solid #e9ecef;
        }

        tr:hover {
            background: #f8f9fa;
        }

        .charts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 25px;
            margin-top: 30px;
        }

        .chart-container {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }

        .chart-title {
            font-size: 18px;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 20px;
            text-align: center;
        }

        .summary-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .summary-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            text-align: center;
            transition: transform 0.3s ease;
        }

        .summary-card:hover {
            transform: translateY(-5px);
        }

        .summary-card h3 {
            color: #7f8c8d;
            font-size: 14px;
            margin-bottom: 10px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .summary-card .value {
            font-size: 28px;
            font-weight: bold;
            color: #2c3e50;
        }

        .summary-card.positive .value {
            color: #4CAF50;
        }

        .summary-card.negative .value {
            color: #f44336;
        }

        .config-section {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 25px;
        }

        .config-section h3 {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 20px;
        }

        .delete-btn {
            background: #f44336;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 12px;
            padding: 8px 12px;
            border-radius: 4px;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .delete-btn:hover {
            background: #d32f2f;
            transform: translateY(-1px);
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .header {
                flex-direction: column;
                text-align: center;
                gap: 15px;
            }
            
            .form-grid {
                grid-template-columns: 1fr;
            }
            
            .charts-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <div class="company-info">
                <div class="logo-placeholder">MEI</div>
                <div class="company-details">
                    <h1 id="companyName">Minha Empresa MEI</h1>
                    <p>CNPJ: <span id="companyCNPJ">00.000.000/0001-00</span></p>
                    <p>Período: <span id="currentPeriod">Janeiro 2024</span></p>
                </div>
            </div>
            <div class="status-indicator" id="statusIndicator">
                Faturamento Adequado
            </div>
        </div>

        <!-- Tabs -->
        <div class="tabs">
            <div class="tab active" onclick="showTab('receitas')">Receitas</div>
            <div class="tab" onclick="showTab('despesas')">Despesas</div>
            <div class="tab" onclick="showTab('calculo')">Faturamento Mínimo</div>
            <div class="tab" onclick="showTab('prolabore')">Pró-Labore</div>
            <div class="tab" onclick="showTab('dashboard')">Dashboard</div>
            <div class="tab" onclick="showTab('configuracoes')">Configurações</div>
        </div>

        <!-- Tab: Receitas -->
        <div class="tab-content active" id="receitas">
            <h2>Controle de Receitas</h2>
            
            <div class="form-grid">
                <div class="form-group">
                    <label>Cliente</label>
                    <input type="text" id="cliente" placeholder="Nome do cliente">
                </div>
                <div class="form-group">
                    <label>Data de Recebimento</label>
                    <input type="date" id="dataRecebimento">
                </div>
                <div class="form-group">
                    <label>Valor Acordado (R$)</label>
                    <input type="number" id="valorAcordado" step="0.01" placeholder="0,00">
                </div>
                <div class="form-group">
                    <label>Valor Pago (R$)</label>
                    <input type="number" id="valorPago" step="0.01" placeholder="0,00">
                </div>
            </div>
            
            <button class="btn btn-primary" onclick="adicionarReceita()">Adicionar Receita</button>
            
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Cliente</th>
                            <th>Data</th>
                            <th>Valor Acordado</th>
                            <th>Valor Pago</th>
                            <th>Status</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody id="tabelaReceitas">
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Tab: Despesas -->
        <div class="tab-content" id="despesas">
            <h2>Controle de Despesas</h2>
            
            <div class="form-grid">
                <div class="form-group">
                    <label>Descrição</label>
                    <input type="text" id="descricaoDespesa" placeholder="Descrição da despesa">
                </div>
                <div class="form-group">
                    <label>Tipo</label>
                    <select id="tipoDespesa">
                        <option value="fixa">Fixa</option>
                        <option value="variavel">Variável</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Categoria</label>
                    <select id="categoriaDespesa">
                        <option value="aluguel">Aluguel</option>
                        <option value="internet">Internet</option>
                        <option value="contador">Contador</option>
                        <option value="insumos">Insumos</option>
                        <option value="transporte">Transporte</option>
                        <option value="marketing">Marketing</option>
                        <option value="outros">Outros</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Data</label>
                    <input type="date" id="dataDespesa">
                </div>
                <div class="form-group">
                    <label>Valor (R$)</label>
                    <input type="number" id="valorDespesa" step="0.01" placeholder="0,00">
                </div>
            </div>
            
            <button class="btn btn-primary" onclick="adicionarDespesa()">Adicionar Despesa</button>
            
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Descrição</th>
                            <th>Tipo</th>
                            <th>Categoria</th>
                            <th>Data</th>
                            <th>Valor</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody id="tabelaDespesas">
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Tab: Cálculo Faturamento Mínimo -->
        <div class="tab-content" id="calculo">
            <h2>Cálculo de Faturamento Mínimo</h2>
            
            <div class="summary-cards">
                <div class="summary-card">
                    <h3>Despesas Fixas Mensais</h3>
                    <div class="value" id="totalDespesasFixas">R$ 0,00</div>
                </div>
                <div class="summary-card">
                    <h3>Despesas Variáveis Médias</h3>
                    <div class="value" id="mediaDespesasVariaveis">R$ 0,00</div>
                </div>
                <div class="summary-card">
                    <h3>Margem de Segurança</h3>
                    <div class="value" id="margemSeguranca">20%</div>
                </div>
                <div class="summary-card">
                    <h3>Faturamento Mínimo</h3>
                    <div class="value" id="faturamentoMinimo">R$ 0,00</div>
                </div>
            </div>

            <div class="config-section">
                <h3>Configurar Margem de Segurança</h3>
                <div class="form-grid">
                    <div class="form-group">
                        <label>Margem de Segurança (%)</label>
                        <input type="number" id="inputMargemSeguranca" value="20" min="0" max="100" onchange="calcularFaturamentoMinimo()">
                    </div>
                </div>
            </div>
        </div>

        <!-- Tab: Pró-Labore -->
        <div class="tab-content" id="prolabore">
            <h2>Pró-Labore e Reserva Financeira</h2>
            
            <div class="summary-cards">
                <div class="summary-card">
                    <h3>Receita Total Mensal</h3>
                    <div class="value positive" id="receitaTotalMensal">R$ 0,00</div>
                </div>
                <div class="summary-card">
                    <h3>Pró-Labore Definido</h3>
                    <div class="value" id="proLaboreDefinido">R$ 0,00</div>
                </div>
                <div class="summary-card">
                    <h3>Reserva Financeira</h3>
                    <div class="value" id="reservaFinanceira">R$ 0,00</div>
                </div>
                <div class="summary-card">
                    <h3>Disponível para Empresa</h3>
                    <div class="value" id="disponivelEmpresa">R$ 0,00</div>
                </div>
            </div>

            <div class="config-section">
                <h3>Configurações de Retirada</h3>
                <div class="form-grid">
                    <div class="form-group">
                        <label>Pró-Labore Mensal (R$)</label>
                        <input type="number" id="inputProLabore" step="0.01" placeholder="0,00" onchange="calcularProLabore()">
                    </div>
                    <div class="form-group">
                        <label>Percentual para Reserva (%)</label>
                        <input type="number" id="inputPercentualReserva" value="10" min="0" max="100" onchange="calcularProLabore()">
                    </div>
                </div>
            </div>
        </div>

        <!-- Tab: Dashboard -->
        <div class="tab-content" id="dashboard">
            <h2>Dashboard Financeiro</h2>
            
            <div class="summary-cards">
                <div class="summary-card positive">
                    <h3>Receita Total</h3>
                    <div class="value" id="dashReceitaTotal">R$ 0,00</div>
                </div>
                <div class="summary-card negative">
                    <h3>Despesas Totais</h3>
                    <div class="value" id="dashDespesasTotal">R$ 0,00</div>
                </div>
                <div class="summary-card">
                    <h3>Resultado Líquido</h3>
                    <div class="value" id="dashResultado">R$ 0,00</div>
                </div>
                <div class="summary-card">
                    <h3>Margem de Lucro</h3>
                    <div class="value" id="dashMargem">0%</div>
                </div>
            </div>

            <div class="charts-grid">
                <div class="chart-container">
                    <div class="chart-title">Evolução Mensal de Receitas</div>
                    <canvas id="chartReceitas"></canvas>
                </div>
                <div class="chart-container">
                    <div class="chart-title">Receitas vs Despesas</div>
                    <canvas id="chartComparacao"></canvas>
                </div>
                <div class="chart-container">
                    <div class="chart-title">Distribuição de Despesas</div>
                    <canvas id="chartDespesas"></canvas>
                </div>
                <div class="chart-container">
                    <div class="chart-title">Análise por Cliente</div>
                    <canvas id="chartClientes"></canvas>
                </div>
            </div>
        </div>

        <!-- Tab: Configurações -->
        <div class="tab-content" id="configuracoes">
            <h2>Configurações da Empresa</h2>
            
            <div class="config-section">
                <h3>Dados da Empresa</h3>
                <div class="form-grid">
                    <div class="form-group">
                        <label>Nome da Empresa</label>
                        <input type="text" id="inputNomeEmpresa" placeholder="Nome da sua empresa">
                    </div>
                    <div class="form-group">
                        <label>CNPJ</label>
                        <input type="text" id="inputCNPJ" placeholder="00.000.000/0001-00">
                    </div>
                </div>
                <button class="btn btn-primary" onclick="salvarConfiguracoes()">Salvar Configurações</button>
            </div>

            <div class="config-section">
                <h3>Gerenciar Dados</h3>
                <div style="display: flex; gap: 15px; flex-wrap: wrap;">
                    <button class="btn btn-primary" onclick="exportarDados()">Exportar Dados JSON</button>
                    <button class="btn btn-primary" onclick="gerarPlanilhaGoogleSheets()" style="background: linear-gradient(45deg, #4CAF50, #45a049);">Gerar Planilha Google Sheets</button>
                    <button class="btn btn-primary" onclick="gerarRelatorioVisual()" style="background: linear-gradient(45deg, #9c27b0, #673ab7);">Baixar Relatório Visual</button>
                    <button class="btn btn-danger" onclick="limparDados()">Limpar Todos os Dados</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Dados globais
        let receitas = JSON.parse(localStorage.getItem('receitas')) || [];
        let despesas = JSON.parse(localStorage.getItem('despesas')) || [];
        let configuracoes = JSON.parse(localStorage.getItem('configuracoes')) || {
            nomeEmpresa: 'Minha Empresa MEI',
            cnpj: '00.000.000/0001-00',
            margemSeguranca: 20,
            proLabore: 0,
            percentualReserva: 10
        };

        // Inicialização
        document.addEventListener('DOMContentLoaded', function() {
            carregarConfiguracoes();
            atualizarTabelas();
            atualizarCalculos();
            atualizarDashboard();
            
            // Definir data atual como padrão
            const hoje = new Date().toISOString().split('T')[0];
            document.getElementById('dataRecebimento').value = hoje;
            document.getElementById('dataDespesa').value = hoje;
        });

        // Funções de navegação
        function showTab(tabName) {
            // Remover classe active de todas as tabs
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            // Adicionar classe active na tab selecionada
            event.target.classList.add('active');
            document.getElementById(tabName).classList.add('active');
            
            // Atualizar dashboard se necessário
            if (tabName === 'dashboard') {
                setTimeout(atualizarDashboard, 100);
            }
        }

        // Funções de Receitas
        function adicionarReceita() {
            const cliente = document.getElementById('cliente').value;
            const data = document.getElementById('dataRecebimento').value;
            const valorAcordado = parseFloat(document.getElementById('valorAcordado').value) || 0;
            const valorPago = parseFloat(document.getElementById('valorPago').value) || 0;

            if (!cliente || !data || valorAcordado <= 0) {
                alert('Por favor, preencha todos os campos obrigatórios.');
                return;
            }

            const receita = {
                id: Date.now(),
                cliente,
                data,
                valorAcordado,
                valorPago,
                status: valorPago >= valorAcordado ? 'Pago' : 'Pendente'
            };

            receitas.push(receita);
            salvarDados();
            limparFormularioReceita();
            atualizarTabelas();
            atualizarCalculos();
        }

        function limparFormularioReceita() {
            document.getElementById('cliente').value = '';
            document.getElementById('valorAcordado').value = '';
            document.getElementById('valorPago').value = '';
        }

        function removerReceita(id) {
            receitas = receitas.filter(r => r.id !== id);
            salvarDados();
            atualizarTabelas();
            atualizarCalculos();
        }

        // Funções de Despesas
        function adicionarDespesa() {
            const descricao = document.getElementById('descricaoDespesa').value;
            const tipo = document.getElementById('tipoDespesa').value;
            const categoria = document.getElementById('categoriaDespesa').value;
            const data = document.getElementById('dataDespesa').value;
            const valor = parseFloat(document.getElementById('valorDespesa').value) || 0;

            if (!descricao || !data || valor <= 0) {
                alert('Por favor, preencha todos os campos obrigatórios.');
                return;
            }

            const despesa = {
                id: Date.now(),
                descricao,
                tipo,
                categoria,
                data,
                valor
            };

            despesas.push(despesa);
            salvarDados();
            limparFormularioDespesa();
            atualizarTabelas();
            atualizarCalculos();
        }

        function limparFormularioDespesa() {
            document.getElementById('descricaoDespesa').value = '';
            document.getElementById('valorDespesa').value = '';
        }

        function removerDespesa(id) {
            despesas = despesas.filter(d => d.id !== id);
            salvarDados();
            atualizarTabelas();
            atualizarCalculos();
        }

        // Atualizar tabelas
        function atualizarTabelas() {
            atualizarTabelaReceitas();
            atualizarTabelaDespesas();
        }

        function atualizarTabelaReceitas() {
            const tbody = document.getElementById('tabelaReceitas');
            tbody.innerHTML = '';

            receitas.forEach(receita => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${receita.cliente}</td>
                    <td>${new Date(receita.data).toLocaleDateString('pt-BR')}</td>
                    <td>R$ ${receita.valorAcordado.toFixed(2).replace('.', ',')}</td>
                    <td>R$ ${receita.valorPago.toFixed(2).replace('.', ',')}</td>
                    <td><span style="color: ${receita.status === 'Pago' ? '#4CAF50' : '#f44336'}">${receita.status}</span></td>
                    <td><button class="delete-btn" onclick="removerReceita(${receita.id})">Excluir</button></td>
                `;
                tbody.appendChild(tr);
            });
        }

        function atualizarTabelaDespesas() {
            const tbody = document.getElementById('tabelaDespesas');
            tbody.innerHTML = '';

            despesas.forEach(despesa => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${despesa.descricao}</td>
                    <td><span style="color: ${despesa.tipo === 'fixa' ? '#667eea' : '#f39c12'}">${despesa.tipo === 'fixa' ? 'Fixa' : 'Variável'}</span></td>
                    <td>${despesa.categoria}</td>
                    <td>${new Date(despesa.data).toLocaleDateString('pt-BR')}</td>
                    <td>R$ ${despesa.valor.toFixed(2).replace('.', ',')}</td>
                    <td><button class="delete-btn" onclick="removerDespesa(${despesa.id})">Excluir</button></td>
                `;
                tbody.appendChild(tr);
            });
        }

        // Cálculos
        function calcularFaturamentoMinimo() {
            const despesasFixas = despesas.filter(d => d.tipo === 'fixa').reduce((sum, d) => sum + d.valor, 0);
            const despesasVariaveis = despesas.filter(d => d.tipo === 'variavel');
            const mediaDespesasVariaveis = despesasVariaveis.length > 0 ? 
                despesasVariaveis.reduce((sum, d) => sum + d.valor, 0) / despesasVariaveis.length : 0;
            
            const margemSeguranca = parseFloat(document.getElementById('inputMargemSeguranca').value) || 20;
            const custoTotal = despesasFixas + mediaDespesasVariaveis;
            const faturamentoMinimo = custoTotal * (1 + margemSeguranca / 100);

            document.getElementById('totalDespesasFixas').textContent = `R$ ${despesasFixas.toFixed(2).replace('.', ',')}`;
            document.getElementById('mediaDespesasVariaveis').textContent = `R$ ${mediaDespesasVariaveis.toFixed(2).replace('.', ',')}`;
            document.getElementById('margemSeguranca').textContent = `${margemSeguranca}%`;
            document.getElementById('faturamentoMinimo').textContent = `R$ ${faturamentoMinimo.toFixed(2).replace('.', ',')}`;

            // Atualizar status
            const receitaAtual = receitas.reduce((sum, r) => sum + r.valorPago, 0);
            const statusIndicator = document.getElementById('statusIndicator');
            
            if (receitaAtual >= faturamentoMinimo) {
                statusIndicator.textContent = 'Faturamento Adequado';
                statusIndicator.className = 'status-indicator status-green';
            } else {
                statusIndicator.textContent = 'Faturamento Abaixo do Mínimo';
                statusIndicator.className = 'status-indicator status-red';
            }
        }

        function calcularProLabore() {
            const receitaTotal = receitas.reduce((sum, r) => sum + r.valorPago, 0);
            const proLabore = parseFloat(document.getElementById('inputProLabore').value) || 0;
            const percentualReserva = parseFloat(document.getElementById('inputPercentualReserva').value) || 10;
            
            const reserva = receitaTotal * (percentualReserva / 100);
            const disponivel = receitaTotal - proLabore - reserva;

            document.getElementById('receitaTotalMensal').textContent = `R$ ${receitaTotal.toFixed(2).replace('.', ',')}`;
            document.getElementById('proLaboreDefinido').textContent = `R$ ${proLabore.toFixed(2).replace('.', ',')}`;
            document.getElementById('reservaFinanceira').textContent = `R$ ${reserva.toFixed(2).replace('.', ',')}`;
            document.getElementById('disponivelEmpresa').textContent = `R$ ${disponivel.toFixed(2).replace('.', ',')}`;
        }

        function atualizarCalculos() {
            calcularFaturamentoMinimo();
            calcularProLabore();
        }

        // Dashboard
        function atualizarDashboard() {
            const receitaTotal = receitas.reduce((sum, r) => sum + r.valorPago, 0);
            const despesasTotal = despesas.reduce((sum, d) => sum + d.valor, 0);
            const resultado = receitaTotal - despesasTotal;
            const margem = receitaTotal > 0 ? (resultado / receitaTotal * 100) : 0;

            document.getElementById('dashReceitaTotal').textContent = `R$ ${receitaTotal.toFixed(2).replace('.', ',')}`;
            document.getElementById('dashDespesasTotal').textContent = `R$ ${despesasTotal.toFixed(2).replace('.', ',')}`;
            document.getElementById('dashResultado').textContent = `R$ ${resultado.toFixed(2).replace('.', ',')}`;
            document.getElementById('dashMargem').textContent = `${margem.toFixed(1)}%`;

            // Atualizar cor do resultado
            const resultadoElement = document.getElementById('dashResultado');
            resultadoElement.style.color = resultado >= 0 ? '#4CAF50' : '#f44336';

            criarGraficos();
        }

        function criarGraficos() {
            // Gráfico de Receitas Mensais
            const ctxReceitas = document.getElementById('chartReceitas');
            if (ctxReceitas) {
                new Chart(ctxReceitas, {
                    type: 'line',
                    data: {
                        labels: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun'],
                        datasets: [{
                            label: 'Receitas',
                            data: [5000, 7500, 6200, 8100, 9300, 8800],
                            borderColor: '#667eea',
                            backgroundColor: 'rgba(102, 126, 234, 0.1)',
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                display: false
                            }
                        }
                    }
                });
            }

            // Gráfico Receitas vs Despesas
            const ctxComparacao = document.getElementById('chartComparacao');
            if (ctxComparacao) {
                const receitaTotal = receitas.reduce((sum, r) => sum + r.valorPago, 0);
                const despesasTotal = despesas.reduce((sum, d) => sum + d.valor, 0);
                
                new Chart(ctxComparacao, {
                    type: 'bar',
                    data: {
                        labels: ['Receitas', 'Despesas'],
                        datasets: [{
                            data: [receitaTotal, despesasTotal],
                            backgroundColor: ['#4CAF50', '#f44336']
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                display: false
                            }
                        }
                    }
                });
            }

            // Gráfico de Distribuição de Despesas
            const ctxDespesas = document.getElementById('chartDespesas');
            if (ctxDespesas) {
                const categorias = {};
                despesas.forEach(d => {
                    categorias[d.categoria] = (categorias[d.categoria] || 0) + d.valor;
                });

                new Chart(ctxDespesas, {
                    type: 'doughnut',
                    data: {
                        labels: Object.keys(categorias),
                        datasets: [{
                            data: Object.values(categorias),
                            backgroundColor: ['#667eea', '#764ba2', '#f093fb', '#f5576c', '#4facfe', '#00f2fe']
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'bottom'
                            }
                        }
                    }
                });
            }

            // Gráfico por Cliente
            const ctxClientes = document.getElementById('chartClientes');
            if (ctxClientes) {
                const clientes = {};
                receitas.forEach(r => {
                    clientes[r.cliente] = (clientes[r.cliente] || 0) + r.valorPago;
                });

                new Chart(ctxClientes, {
                    type: 'bar',
                    data: {
                        labels: Object.keys(clientes),
                        datasets: [{
                            label: 'Receita por Cliente',
                            data: Object.values(clientes),
                            backgroundColor: '#667eea'
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                display: false
                            }
                        }
                    }
                });
            }
        }

        // Configurações
        function carregarConfiguracoes() {
            document.getElementById('companyName').textContent = configuracoes.nomeEmpresa;
            document.getElementById('companyCNPJ').textContent = configuracoes.cnpj;
            document.getElementById('inputNomeEmpresa').value = configuracoes.nomeEmpresa;
            document.getElementById('inputCNPJ').value = configuracoes.cnpj;
            document.getElementById('inputMargemSeguranca').value = configuracoes.margemSeguranca;
            document.getElementById('inputProLabore').value = configuracoes.proLabore;
            document.getElementById('inputPercentualReserva').value = configuracoes.percentualReserva;
        }

        function salvarConfiguracoes() {
            configuracoes.nomeEmpresa = document.getElementById('inputNomeEmpresa').value;
            configuracoes.cnpj = document.getElementById('inputCNPJ').value;
            configuracoes.margemSeguranca = parseFloat(document.getElementById('inputMargemSeguranca').value);
            configuracoes.proLabore = parseFloat(document.getElementById('inputProLabore').value);
            configuracoes.percentualReserva = parseFloat(document.getElementById('inputPercentualReserva').value);
            
            localStorage.setItem('configuracoes', JSON.stringify(configuracoes));
            carregarConfiguracoes();
            alert('Configurações salvas com sucesso!');
        }

        function exportarDados() {
            const dados = {
                receitas,
                despesas,
                configuracoes,
                dataExportacao: new Date().toISOString()
            };
            
            const blob = new Blob([JSON.stringify(dados, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `planilha-mei-${new Date().toISOString().split('T')[0]}.json`;
            a.click();
            URL.revokeObjectURL(url);
        }

        function gerarPlanilhaGoogleSheets() {
            // Criar estrutura CSV compatível com Google Sheets
            let csvContent = '';
            
            // Cabeçalho da empresa
            csvContent += `${configuracoes.nomeEmpresa}\n`;
            csvContent += `CNPJ: ${configuracoes.cnpj}\n`;
            csvContent += `Relatório gerado em: ${new Date().toLocaleDateString('pt-BR')}\n\n`;
            
            // Seção de Receitas
            csvContent += 'RECEITAS\n';
            csvContent += 'Cliente,Data,Valor Acordado,Valor Pago,Status\n';
            receitas.forEach(receita => {
                csvContent += `"${receita.cliente}","${new Date(receita.data).toLocaleDateString('pt-BR')}","R$ ${receita.valorAcordado.toFixed(2).replace('.', ',')}","R$ ${receita.valorPago.toFixed(2).replace('.', ',')}","${receita.status}"\n`;
            });
            
            csvContent += '\n';
            
            // Seção de Despesas
            csvContent += 'DESPESAS\n';
            csvContent += 'Descrição,Tipo,Categoria,Data,Valor\n';
            despesas.forEach(despesa => {
                csvContent += `"${despesa.descricao}","${despesa.tipo === 'fixa' ? 'Fixa' : 'Variável'}","${despesa.categoria}","${new Date(despesa.data).toLocaleDateString('pt-BR')}","R$ ${despesa.valor.toFixed(2).replace('.', ',')}"\n`;
            });
            
            csvContent += '\n';
            
            // Resumo Financeiro
            const receitaTotal = receitas.reduce((sum, r) => sum + r.valorPago, 0);
            const despesasTotal = despesas.reduce((sum, d) => sum + d.valor, 0);
            const resultado = receitaTotal - despesasTotal;
            const despesasFixas = despesas.filter(d => d.tipo === 'fixa').reduce((sum, d) => sum + d.valor, 0);
            const despesasVariaveis = despesas.filter(d => d.tipo === 'variavel').reduce((sum, d) => sum + d.valor, 0);
            
            csvContent += 'RESUMO FINANCEIRO\n';
            csvContent += 'Indicador,Valor\n';
            csvContent += `"Receita Total","R$ ${receitaTotal.toFixed(2).replace('.', ',')}"\n`;
            csvContent += `"Despesas Fixas","R$ ${despesasFixas.toFixed(2).replace('.', ',')}"\n`;
            csvContent += `"Despesas Variáveis","R$ ${despesasVariaveis.toFixed(2).replace('.', ',')}"\n`;
            csvContent += `"Total de Despesas","R$ ${despesasTotal.toFixed(2).replace('.', ',')}"\n`;
            csvContent += `"Resultado Líquido","R$ ${resultado.toFixed(2).replace('.', ',')}"\n`;
            csvContent += `"Margem de Lucro","${receitaTotal > 0 ? (resultado / receitaTotal * 100).toFixed(1) : 0}%"\n`;
            
            csvContent += '\n';
            
            // Análise por Cliente
            csvContent += 'ANÁLISE POR CLIENTE\n';
            csvContent += 'Cliente,Total Recebido\n';
            const clientesResumo = {};
            receitas.forEach(r => {
                clientesResumo[r.cliente] = (clientesResumo[r.cliente] || 0) + r.valorPago;
            });
            
            Object.entries(clientesResumo).forEach(([cliente, total]) => {
                csvContent += `"${cliente}","R$ ${total.toFixed(2).replace('.', ',')}"\n`;
            });
            
            csvContent += '\n';
            
            // Análise por Categoria de Despesa
            csvContent += 'ANÁLISE POR CATEGORIA DE DESPESA\n';
            csvContent += 'Categoria,Total Gasto\n';
            const categoriasResumo = {};
            despesas.forEach(d => {
                categoriasResumo[d.categoria] = (categoriasResumo[d.categoria] || 0) + d.valor;
            });
            
            Object.entries(categoriasResumo).forEach(([categoria, total]) => {
                csvContent += `"${categoria}","R$ ${total.toFixed(2).replace('.', ',')}"\n`;
            });
            
            // Criar e baixar arquivo CSV
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `planilha-mei-google-sheets-${new Date().toISOString().split('T')[0]}.csv`;
            a.click();
            URL.revokeObjectURL(url);
            
            // Mostrar instruções
            setTimeout(() => {
                alert(`Planilha CSV gerada com sucesso!\n\nPara usar no Google Sheets:\n1. Acesse sheets.google.com\n2. Crie uma nova planilha\n3. Vá em Arquivo > Importar\n4. Selecione o arquivo CSV baixado\n5. Configure: Separador = vírgula, Codificação = UTF-8\n\nA planilha manterá toda a formatação e organização dos dados!`);
            }, 500);
        }

        function gerarRelatorioVisual() {
            // Calcular totais
            const receitaTotal = receitas.reduce((sum, r) => sum + r.valorPago, 0);
            const despesasTotal = despesas.reduce((sum, d) => sum + d.valor, 0);
            const resultado = receitaTotal - despesasTotal;
            const despesasFixas = despesas.filter(d => d.tipo === 'fixa').reduce((sum, d) => sum + d.valor, 0);
            const despesasVariaveis = despesas.filter(d => d.tipo === 'variavel').reduce((sum, d) => sum + d.valor, 0);
            
            // Criar HTML com o mesmo visual
            let htmlContent = `<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Relatório Financeiro MEI - ${configuracoes.nomeEmpresa}</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        .header {
            background: white;
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 25px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
        }

        .company-info {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .logo-placeholder {
            width: 80px;
            height: 80px;
            background: linear-gradient(45deg, #4CAF50, #45a049);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 24px;
            font-weight: bold;
        }

        .company-details h1 {
            color: #2c3e50;
            font-size: 28px;
            margin-bottom: 5px;
        }

        .company-details p {
            color: #7f8c8d;
            font-size: 14px;
        }

        .status-indicator {
            padding: 12px 24px;
            border-radius: 25px;
            font-weight: bold;
            font-size: 16px;
            background: linear-gradient(45deg, #4CAF50, #45a049);
            color: white;
        }

        .section {
            background: white;
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 25px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }

        .section h2 {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 24px;
        }

        .table-container {
            overflow-x: auto;
            margin: 25px 0;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }

        table {
            width: 100%;
            border-collapse: collapse;
            background: white;
        }

        th {
            background: linear-gradient(45deg, #2c3e50, #34495e);
            color: white;
            padding: 15px;
            text-align: left;
            font-weight: 600;
        }

        td {
            padding: 15px;
            border-bottom: 1px solid #e9ecef;
        }

        tr:nth-child(even) {
            background: #f8f9fa;
        }

        .summary-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .summary-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            text-align: center;
        }

        .summary-card h3 {
            color: #7f8c8d;
            font-size: 14px;
            margin-bottom: 10px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .summary-card .value {
            font-size: 28px;
            font-weight: bold;
            color: #2c3e50;
        }

        .summary-card.positive .value {
            color: #4CAF50;
        }

        .summary-card.negative .value {
            color: #f44336;
        }

        .status-pago {
            color: #4CAF50;
            font-weight: bold;
        }

        .status-pendente {
            color: #f44336;
            font-weight: bold;
        }

        .tipo-fixa {
            color: #667eea;
            font-weight: bold;
        }

        .tipo-variavel {
            color: #f39c12;
            font-weight: bold;
        }

        @media print {
            body {
                background: white;
            }
            .section {
                box-shadow: none;
                border: 1px solid #ddd;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <div class="company-info">
                <div class="logo-placeholder">MEI</div>
                <div class="company-details">
                    <h1>${configuracoes.nomeEmpresa}</h1>
                    <p>CNPJ: ${configuracoes.cnpj}</p>
                    <p>Relatório gerado em: ${new Date().toLocaleDateString('pt-BR')}</p>
                </div>
            </div>
            <div class="status-indicator">
                Relatório Completo
            </div>
        </div>

        <!-- Resumo Financeiro -->
        <div class="section">
            <h2>Resumo Financeiro</h2>
            <div class="summary-cards">
                <div class="summary-card positive">
                    <h3>Receita Total</h3>
                    <div class="value">R$ ${receitaTotal.toFixed(2).replace('.', ',')}</div>
                </div>
                <div class="summary-card negative">
                    <h3>Despesas Totais</h3>
                    <div class="value">R$ ${despesasTotal.toFixed(2).replace('.', ',')}</div>
                </div>
                <div class="summary-card ${resultado >= 0 ? 'positive' : 'negative'}">
                    <h3>Resultado Líquido</h3>
                    <div class="value">R$ ${resultado.toFixed(2).replace('.', ',')}</div>
                </div>
                <div class="summary-card">
                    <h3>Margem de Lucro</h3>
                    <div class="value">${receitaTotal > 0 ? (resultado / receitaTotal * 100).toFixed(1) : 0}%</div>
                </div>
            </div>
        </div>

        <!-- Receitas -->
        <div class="section">
            <h2>Receitas</h2>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Cliente</th>
                            <th>Data</th>
                            <th>Valor Acordado</th>
                            <th>Valor Pago</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>`;

            receitas.forEach(receita => {
                htmlContent += `
                        <tr>
                            <td>${receita.cliente}</td>
                            <td>${new Date(receita.data).toLocaleDateString('pt-BR')}</td>
                            <td>R$ ${receita.valorAcordado.toFixed(2).replace('.', ',')}</td>
                            <td>R$ ${receita.valorPago.toFixed(2).replace('.', ',')}</td>
                            <td><span class="${receita.status === 'Pago' ? 'status-pago' : 'status-pendente'}">${receita.status}</span></td>
                        </tr>`;
            });

            htmlContent += `
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Despesas -->
        <div class="section">
            <h2>Despesas</h2>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Descrição</th>
                            <th>Tipo</th>
                            <th>Categoria</th>
                            <th>Data</th>
                            <th>Valor</th>
                        </tr>
                    </thead>
                    <tbody>`;

            despesas.forEach(despesa => {
                htmlContent += `
                        <tr>
                            <td>${despesa.descricao}</td>
                            <td><span class="${despesa.tipo === 'fixa' ? 'tipo-fixa' : 'tipo-variavel'}">${despesa.tipo === 'fixa' ? 'Fixa' : 'Variável'}</span></td>
                            <td>${despesa.categoria}</td>
                            <td>${new Date(despesa.data).toLocaleDateString('pt-BR')}</td>
                            <td>R$ ${despesa.valor.toFixed(2).replace('.', ',')}</td>
                        </tr>`;
            });

            // Análise por Cliente
            const clientesResumo = {};
            receitas.forEach(r => {
                clientesResumo[r.cliente] = (clientesResumo[r.cliente] || 0) + r.valorPago;
            });

            htmlContent += `
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Análise por Cliente -->
        <div class="section">
            <h2>Análise por Cliente</h2>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Cliente</th>
                            <th>Total Recebido</th>
                            <th>Participação</th>
                        </tr>
                    </thead>
                    <tbody>`;

            Object.entries(clientesResumo).forEach(([cliente, total]) => {
                const participacao = receitaTotal > 0 ? (total / receitaTotal * 100).toFixed(1) : 0;
                htmlContent += `
                        <tr>
                            <td>${cliente}</td>
                            <td>R$ ${total.toFixed(2).replace('.', ',')}</td>
                            <td>${participacao}%</td>
                        </tr>`;
            });

            // Análise por Categoria de Despesa
            const categoriasResumo = {};
            despesas.forEach(d => {
                categoriasResumo[d.categoria] = (categoriasResumo[d.categoria] || 0) + d.valor;
            });

            htmlContent += `
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Análise por Categoria de Despesa -->
        <div class="section">
            <h2>Análise por Categoria de Despesa</h2>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Categoria</th>
                            <th>Total Gasto</th>
                            <th>Participação</th>
                        </tr>
                    </thead>
                    <tbody>`;

            Object.entries(categoriasResumo).forEach(([categoria, total]) => {
                const participacao = despesasTotal > 0 ? (total / despesasTotal * 100).toFixed(1) : 0;
                htmlContent += `
                        <tr>
                            <td>${categoria}</td>
                            <td>R$ ${total.toFixed(2).replace('.', ',')}</td>
                            <td>${participacao}%</td>
                        </tr>`;
            });

            htmlContent += `
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Detalhamento de Despesas -->
        <div class="section">
            <h2>Detalhamento de Despesas por Tipo</h2>
            <div class="summary-cards">
                <div class="summary-card">
                    <h3>Despesas Fixas</h3>
                    <div class="value">R$ ${despesasFixas.toFixed(2).replace('.', ',')}</div>
                </div>
                <div class="summary-card">
                    <h3>Despesas Variáveis</h3>
                    <div class="value">R$ ${despesasVariaveis.toFixed(2).replace('.', ',')}</div>
                </div>
                <div class="summary-card">
                    <h3>Percentual Fixas</h3>
                    <div class="value">${despesasTotal > 0 ? (despesasFixas / despesasTotal * 100).toFixed(1) : 0}%</div>
                </div>
                <div class="summary-card">
                    <h3>Percentual Variáveis</h3>
                    <div class="value">${despesasTotal > 0 ? (despesasVariaveis / despesasTotal * 100).toFixed(1) : 0}%</div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>`;

            // Criar e baixar arquivo HTML
            const blob = new Blob([htmlContent], { type: 'text/html;charset=utf-8;' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `relatorio-financeiro-mei-${new Date().toISOString().split('T')[0]}.html`;
            a.click();
            URL.revokeObjectURL(url);
            
            // Mostrar instruções
            setTimeout(() => {
                alert(`Relatório HTML gerado com sucesso!\n\nO arquivo baixado mantém exatamente o mesmo visual da aplicação e pode ser:\n- Aberto em qualquer navegador\n- Impresso com qualidade profissional\n- Compartilhado por email\n- Convertido para PDF\n\nO relatório inclui todos os dados organizados com o mesmo design!`);
            }, 500);
        }

        function limparDados() {
            if (confirm('Tem certeza que deseja limpar todos os dados? Esta ação não pode ser desfeita.')) {
                receitas = [];
                despesas = [];
                localStorage.removeItem('receitas');
                localStorage.removeItem('despesas');
                atualizarTabelas();
                atualizarCalculos();
                alert('Dados limpos com sucesso!');
            }
        }

        // Salvar dados
        function salvarDados() {
            localStorage.setItem('receitas', JSON.stringify(receitas));
            localStorage.setItem('despesas', JSON.stringify(despesas));
        }
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'97cef9d761241cf7',t:'MTc1NzUwNzgzOC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
